{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//pragma\npragma solidity ^0.8.18;\n//Imports\nimport \"./PriceConverter.sol\";\n//error\nerror FundMe__Unauthorized();\n\n/**\n * @title This is a contract for crowd funding\n * @author Fahm21\n * @notice This is just a sample and should not be used for live development\n * @dev This contract gives us the current eth price, stores funder and more\n */\n\ncontract FundMe {\n    //Type declaration\n    using PriceConverter for uint256;\n\n    //state variables\n    address[] private s_funders;\n    mapping(address => uint256) private s_fundersToAmountFunded;\n\n    address private immutable i_owner;\n    AggregatorV3Interface private s_priceFeed;\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    //events\n    //modifiers\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe__Unauthorized();\n        }\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // receive() external payable {\n    //     fund();\n    // }\n\n    // fallback() external payable {\n    //     fund();\n    // }\n\n    function fund() public payable {\n        if (msg.value.getConvertionRate(s_priceFeed) <= MINIMUM_USD) {\n            revert FundMe__Unauthorized();\n        }\n\n        s_fundersToAmountFunded[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory cheapfunders = s_funders;\n\n        for (uint i = 0; i < cheapfunders.length; i++) {\n            s_fundersToAmountFunded[cheapfunders[i]] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool success, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (!success) {\n            revert FundMe__Unauthorized();\n        }\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunders(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAmountFunded(address funder) public view returns (uint256) {\n        return s_fundersToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        return uint256(answer * 1e10);\n    }\n\n    function getConvertionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        return (ethPrice * ethAmount) / 1e18;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}