{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n//pragma\r\npragma solidity ^0.8.18;\r\n//Imports\r\nimport \"./PriceConverter.sol\";\r\n//error\r\nerror FundMe__Unauthorized();\r\n\r\n/**\r\n * @title This is a contract for crowd funding\r\n * @author Fahm21\r\n * @notice This is just a sample and should not be used for live development\r\n * @dev This contract gives us the current eth price, stores funder and more\r\n */\r\n\r\ncontract FundMe {\r\n    //Type declaration\r\n    using PriceConverter for uint256;\r\n\r\n    //state variables\r\n    address[] private s_funders;\r\n    mapping(address => uint256) private s_fundersToAmountFunded;\r\n\r\n    address private immutable i_owner;\r\n    AggregatorV3Interface private s_priceFeed;\r\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\r\n\r\n    //events\r\n    //modifiers\r\n    modifier onlyOwner() {\r\n        if (msg.sender != i_owner) {\r\n            revert FundMe__Unauthorized();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    // receive() external payable {\r\n    //     fund();\r\n    // }\r\n\r\n    // fallback() external payable {\r\n    //     fund();\r\n    // }\r\n\r\n    function fund() public payable {\r\n        if (msg.value.getConvertionRate(s_priceFeed) <= MINIMUM_USD) {\r\n            revert FundMe__Unauthorized();\r\n        }\r\n\r\n        s_fundersToAmountFunded[msg.sender] += msg.value;\r\n        s_funders.push(msg.sender);\r\n    }\r\n\r\n    function cheaperWithdraw() public payable onlyOwner {\r\n        address[] memory cheapfunders = s_funders;\r\n\r\n        for (uint i = 0; i < cheapfunders.length; i++) {\r\n            s_fundersToAmountFunded[cheapfunders[i]] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        if (!success) {\r\n            revert FundMe__Unauthorized();\r\n        }\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return i_owner;\r\n    }\r\n\r\n    function getFunders(uint256 index) public view returns (address) {\r\n        return s_funders[index];\r\n    }\r\n\r\n    function getAmountFunded(address funder) public view returns (uint256) {\r\n        return s_fundersToAmountFunded[funder];\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return s_priceFeed;\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        return uint256(answer * 1e10);\r\n    }\r\n\r\n    function getConvertionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        return (ethPrice * ethAmount) / 1e18;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}